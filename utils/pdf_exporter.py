# from fpdf import FPDF
# from pptx import Presentation
# from pptx.util import Inches
# import os
# import re

# def remove_emojis(text):
#     emoji_pattern = re.compile("["
#         u"\U0001F600-\U0001F64F"  # emoticons
#         u"\U0001F300-\U0001F5FF"  # symbols & pictographs
#         u"\U0001F680-\U0001F6FF"  # transport & map
#         u"\U0001F1E0-\U0001F1FF"  # flags
#         u"\U0001F900-\U0001F9FF"  # Supplemental symbols and pictographs
#         u"\U0001FA70-\U0001FAFF"  # Extended pictographs
#         "]+", flags=re.UNICODE)
#     return emoji_pattern.sub(r'', text)

# def generate_pdf_report(summary, chat_logs):
#     pdf = FPDF()
#     pdf.add_page()
#     pdf.set_auto_page_break(auto=True, margin=15)
#     pdf.set_font("Arial", size=12)

#     # Remove emojis from summary
#     summary = remove_emojis(summary)
#     pdf.multi_cell(0, 10, f"Insight Summary:\n{summary}\n\n")

#     pdf.set_font("Arial", style="B", size=12)
#     pdf.cell(0, 10, "Chat History", ln=True)
#     pdf.set_font("Arial", size=12)

#     for msg in chat_logs:
#         user_msg = remove_emojis(msg["user"])
#         assistant_msg = remove_emojis(msg["assistant"].get("response", ""))
#         pdf.multi_cell(0, 10, f"User: {user_msg}")
#         pdf.multi_cell(0, 10, f"Assistant: {assistant_msg}\n")

#     output_path = "report.pdf"
#     pdf.output(output_path)
#     return output_path

# def export_to_pptx(summary, chat_logs):
#     prs = Presentation()
#     title_slide = prs.slides.add_slide(prs.slide_layouts[0])
#     title_slide.shapes.title.text = "Dynamic Impact Tool Report"
#     title_slide.placeholders[1].text = "Auto-generated by LLM"

#     summary_slide = prs.slides.add_slide(prs.slide_layouts[1])
#     summary_slide.shapes.title.text = "Insight Summary"
#     summary_slide.placeholders[1].text = remove_emojis(summary)

#     chat_slide = prs.slides.add_slide(prs.slide_layouts[1])
#     chat_slide.shapes.title.text = "Chat History"
#     chat_text = "\n".join([
#         f"User: {remove_emojis(msg['user'])}\nAI: {remove_emojis(msg['assistant'].get('response', ''))}"
#         for msg in chat_logs
#     ])
#     chat_slide.placeholders[1].text = chat_text[:2000]  # trim to fit

#     pptx_path = "report.pptx"
#     prs.save(pptx_path)
#     return pptx_path

# from fpdf import FPDF

# class PDF(FPDF):
#     def __init__(self):
#         super().__init__()
#         self.set_auto_page_break(auto=True, margin=15)
#         self.set_font("Arial", size=12)

#     def add_markdown_text(self, text):
#         lines = text.split("\n")
#         for line in lines:
#             # Wrap long lines manually
#             wrapped_lines = self.multi_cell(0, 10, line, align="L")




# from pptx import Presentation
# from pptx.util import Inches, Pt

# def export_to_pptx(session_data, compare_mode=False):
#     prs = Presentation()
#     title_slide_layout = prs.slide_layouts[0]
#     content_slide_layout = prs.slide_layouts[1]

#     if compare_mode:
#         # Title Slide for Comparison
#         slide = prs.slides.add_slide(title_slide_layout)
#         slide.shapes.title.text = "Comparison Report"
#         slide.placeholders[1].text = "Generated using Dynamic Impact Tool"

#         # Comparison Insights
#         for insight in session_data.get("insights", []):
#             slide = prs.slides.add_slide(content_slide_layout)
#             slide.shapes.title.text = "Comparison Insight"

#             question = f"Q: {insight['question']}"
#             answer = f"A: {insight['result']}"

#             text_frame = slide.shapes.placeholders[1].text_frame
#             text_frame.text = question
#             text_frame.add_paragraph(answer)

#         # Comparison Chat History
#         if session_data.get("chat_history"):
#             slide = prs.slides.add_slide(content_slide_layout)
#             slide.shapes.title.text = "Chat History"

#             chat_text = ""
#             for msg in session_data["chat_history"]:
#                 chat_text += f"User: {msg['user']}\nBot: {msg['assistant'].get('response', msg['assistant'])}\n\n"

#             slide.shapes.placeholders[1].text = chat_text[:5000]  # Preventing slide overflow

#     else:
#         # Title Slide for Single Dataset
#         slide = prs.slides.add_slide(title_slide_layout)
#         slide.shapes.title.text = "Dataset Report"
#         slide.placeholders[1].text = "Generated using Dynamic Impact Tool"

#         # Dataset Insights
#         for insight in session_data.get("selected_insight_results", []):
#             slide = prs.slides.add_slide(content_slide_layout)
#             slide.shapes.title.text = "Insight"

#             question = f"Q: {insight['question']}"
#             answer = f"A: {insight['result']}"

#             text_frame = slide.shapes.placeholders[1].text_frame
#             text_frame.text = question
#             text_frame.add_paragraph(answer)

#         # Dataset Chat History
#         if session_data.get("chat_history"):
#             slide = prs.slides.add_slide(content_slide_layout)
#             slide.shapes.title.text = "Chat History"

#             chat_text = ""
#             for msg in session_data["chat_history"]:
#                 chat_text += f"User: {msg['user']}\nBot: {msg['assistant'].get('response', msg['assistant'])}\n\n"

#             slide.shapes.placeholders[1].text = chat_text[:5000]  # Preventing slide overflow

#     file_path = "generated_report.pptx"
#     prs.save(file_path)
#     return file_path
# from fpdf import FPDF

# def generate_pdf_report(session_data, compare_mode=False):
#     pdf = FPDF()
#     pdf.add_page()

#     if compare_mode:
#         pdf.set_font("Arial", 'B', 16)
#         pdf.cell(0, 10, "Comparison Insights Report", ln=True, align="C")
#         pdf.ln(10)

#         # Add Comparison Insights
#         pdf.set_font("Arial", 'B', 14)
#         pdf.cell(0, 10, "Generated Comparison Insights:", ln=True)
#         pdf.ln(5)
#         for insight in session_data.get("insights", []):
#             pdf.set_font("Arial", 'B', 12)
#             pdf.multi_cell(0, 8, f"Question: {insight['question']}")
#             pdf.set_font("Arial", '', 12)
#             pdf.multi_cell(0, 8, f"Answer: {insight['result']}")
#             pdf.ln(4)

#         # Add Chat History
#         pdf.set_font("Arial", 'B', 14)
#         pdf.cell(0, 10, "Chat History:", ln=True)
#         pdf.ln(5)
#         for msg in session_data.get("chat_history", []):
#             pdf.set_font("Arial", 'B', 12)
#             pdf.multi_cell(0, 8, f"User: {msg['user']}")
#             pdf.set_font("Arial", '', 12)
#             pdf.multi_cell(0, 8, f"Bot: {msg['assistant'].get('response', msg['assistant'])}")
#             pdf.ln(4)
#     else:
#         pdf.set_font("Arial", 'B', 16)
#         pdf.cell(0, 10, "Single Dataset Report", ln=True, align="C")
#         pdf.ln(10)

#         # Add Insights
#         pdf.set_font("Arial", 'B', 14)
#         pdf.cell(0, 10, "Generated Insights:", ln=True)
#         pdf.ln(5)
#         for insight in session_data.get("selected_insight_results", []):
#             pdf.set_font("Arial", 'B', 12)
#             pdf.multi_cell(0, 8, f"Question: {insight['question']}")
#             pdf.set_font("Arial", '', 12)
#             pdf.multi_cell(0, 8, f"Answer: {insight['result']}")
#             pdf.ln(4)

#         # Add Chat History
#         pdf.set_font("Arial", 'B', 14)
#         pdf.cell(0, 10, "Chat History:", ln=True)
#         pdf.ln(5)
#         for msg in session_data.get("chat_history", []):
#             pdf.set_font("Arial", 'B', 12)
#             pdf.multi_cell(0, 8, f"User: {msg['user']}")
#             pdf.set_font("Arial", '', 12)
#             pdf.multi_cell(0, 8, f"Bot: {msg['assistant'].get('response', msg['assistant'])}")
#             pdf.ln(4)

#     file_path = "generated_report.pdf"
#     pdf.output(file_path)
#     return file_path


from fpdf import FPDF
import os
import re
import json
import pandas as pd
from pptx import Presentation

# ==================== PDF EXPORTER ==================== #
def generate_pdf_report(session, filename="summary.pdf"):
    pdf = FPDF()
    pdf.add_page()

    font_path = os.path.join("assets", "fonts", "DejaVuSans.ttf")
    pdf.add_font('DejaVu', '', font_path, uni=True)
    pdf.set_font('DejaVu', '', 14)

    pdf.cell(0, 10, f"Dataset: {session.get('name', 'Unnamed Dataset')}", ln=True)

    pdf.cell(0, 10, "Insights:", ln=True)
    for insight in session.get('insights', []):
        pdf.multi_cell(0, 10, f"üîç {insight['question']}\n{insight['result']}\n")

    pdf.cell(0, 10, "Chat History:", ln=True)
    for chat in session.get('chat_history', []):
        pdf.multi_cell(0, 10, f"üßë {chat['user']}\nü§ñ {chat['assistant'].get('response', '')}\n")

    output_path = os.path.join("exports", filename)
    pdf.output(output_path)
    return output_path


from fpdf import FPDF
from fpdf.enums import XPos, YPos
import os

def generate_pdf_report(session, filename="summary.pdf"):
    pdf = FPDF()
    pdf.add_page()

    font_path = os.path.join("assets", "fonts", "DejaVuSans.ttf")
    pdf.add_font("DejaVu", "", font_path)
    pdf.set_font("DejaVu", "", 14)

    pdf.cell(0, 10, f"Dataset: {session.get('name', 'Unnamed Dataset')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)

    pdf.cell(0, 10, "Insights:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
    insight_list = session.get("insights") or session.get("selected_insight_results", [])
    for insight in insight_list:
        pdf.multi_cell(0, 10, f"Question: {insight['question']}\nAnswer: {insight['result']}\n")

    pdf.cell(0, 10, "Chat History:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
    for chat in session.get('chat_history', []):
        user_msg = chat.get('user', '')
        assistant_msg = chat.get('assistant', {}).get('response', '')
        pdf.multi_cell(0, 10, f"User: {user_msg}\nBot: {assistant_msg}\n")

    os.makedirs("exports", exist_ok=True)
    output_path = os.path.join("exports", filename)
    pdf.output(output_path)
    return output_path

# from fpdf import FPDF
# from fpdf.enums import XPos, YPos
# import os
# import tempfile
# import matplotlib.pyplot as plt
# import plotly.io as pio


# def generate_pdf_report(session, filename="summary.pdf"):
#     pdf = FPDF()
#     pdf.add_page()

#     font_path = os.path.join("assets", "fonts", "DejaVuSans.ttf")
#     pdf.add_font("DejaVu", "", font_path)
#     pdf.set_font("DejaVu", "", 14)

#     pdf.cell(0, 10, f"Dataset: {session.get('name', 'Unnamed Dataset')}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)

#     pdf.cell(0, 10, "Insights:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
#     for idx, insight in enumerate(session.get('insights', [])):
#         pdf.multi_cell(0, 10, f"Question: {insight['question']}\nAnswer: {insight['result']}\n")

#         # Check for and include any associated figures if saved previously
#         image_path = insight.get("plot_path")
#         if image_path and os.path.exists(image_path):
#             pdf.image(image_path, w=170)  # Resize image for consistency
#             pdf.ln(10)

#     pdf.cell(0, 10, "Chat History:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
#     for chat in session.get('chat_history', []):
#         user_msg = chat.get('user', '')
#         assistant_msg = chat.get('assistant', {}).get('response', '')
#         pdf.multi_cell(0, 10, f"User: {user_msg}\nBot: {assistant_msg}\n")

#     os.makedirs("exports", exist_ok=True)
#     output_path = os.path.join("exports", filename)
#     pdf.output(output_path)
#     return output_path


# # ==================== PPTX EXPORTER ==================== #
# from pptx import Presentation
# from pptx.util import Inches

# def export_to_pptx(session, filename="summary.pptx"):
#     prs = Presentation()
#     slide_layout = prs.slide_layouts[1]

#     slide = prs.slides.add_slide(slide_layout)
#     slide.shapes.title.text = f"Dataset: {session.get('name', 'Unnamed Dataset')}"

#     for insight in session.get('insights', []):
#         slide = prs.slides.add_slide(slide_layout)
#         slide.shapes.title.text = f"üîç {insight['question']}"
#         slide.shapes.placeholders[1].text = insight['result']

#         image_path = insight.get("plot_path")
#         if image_path and os.path.exists(image_path):
#             left = Inches(1)
#             top = Inches(2)
#             height = Inches(3)
#             slide.shapes.add_picture(image_path, left, top, height=height)

#     slide = prs.slides.add_slide(slide_layout)
#     slide.shapes.title.text = "Chat History"
#     chat_text = ""
#     for chat in session.get('chat_history', []):
#         chat_text += f"üßë {chat['user']}\nü§ñ {chat['assistant'].get('response', '')}\n\n"
#     slide.shapes.placeholders[1].text = chat_text

#     output_path = os.path.join("exports", filename)
#     prs.save(output_path)
#     return output_path







# ==================== PPTX EXPORTER ==================== #
def export_to_pptx(session, filename="summary.pptx"):
    prs = Presentation()

    slide = prs.slides.add_slide(prs.slide_layouts[1])
    slide.shapes.title.text = f"Dataset: {session.get('name', 'Unnamed Dataset')}"
    insight_list = session.get("insights") or session.get("selected_insight_results", [])
    for insight in insight_list:
        slide = prs.slides.add_slide(prs.slide_layouts[1])
        slide.shapes.title.text = f"üîç {insight['question']}"
        slide.shapes.placeholders[1].text = insight['result']

    slide = prs.slides.add_slide(prs.slide_layouts[1])
    slide.shapes.title.text = "Chat History"
    chat_text = ""
    for chat in session.get('chat_history', []):
        chat_text += f"üßë {chat['user']}\nü§ñ {chat['assistant'].get('response', '')}\n\n"

    slide.shapes.placeholders[1].text = chat_text

    output_path = os.path.join("exports", filename)
    prs.save(output_path)
    return output_path



